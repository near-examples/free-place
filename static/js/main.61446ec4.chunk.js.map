{"version":3,"sources":["App.js","index.js"],"names":["ContractName","intToColor","c","toString","padStart","transparentColor","a","generateGamma","hue","gammaColors","i","push","decodeLine","line","buf","Buffer","from","length","Error","pixels","color","readUInt32LE","App","props","colors","map","toLowerCase","currentColor","parseInt","Math","floor","random","substring","state","failedToInitialize","connected","boardLoaded","selectedCell","pickerColor","pickingColor","canvasRef","React","createRef","_context","_lines","_queue","_pendingPixels","_refreshBoardTimer","_sendQueueTimer","_stopRefreshTime","Date","getTime","_initNear","then","setState","canvas","this","current","getContext","addEventListener","e","x","trunc","offsetX","target","clientWidth","y","offsetY","clientHeight","cell","JSON","stringify","renderCanvas","buttons","pickColor","saveColor","drawPixel","document","altKey","slice","_contract","draw","refreshBoard","console","log","concat","ready","clearTimeout","_sendQueue","setTimeout","_pingQueue","_keyStore","getKey","_nearConfig","networkId","keyPair","nearAPI","fromString","setKey","account","_near","connection","viewMethods","changeMethods","sender","newKeyPair","fromRandom","add_access_key","public_key","getPublicKey","removeKey","nearConfig","nodeUrl","contractName","walletUrl","keyStore","BrowserLocalStorageKeyStore","Object","assign","deps","near","initKey","_lineVersions","Array","fill","forced","hidden","get_line_versions","lineVersions","needLines","requestLines","Promise","all","lines","get_lines","results","flat","lineIndex","ctx","j","p","fillStyle","fillRect","forEach","beginPath","strokeStyle","lineWidth","CellWidth","arc","PI","stroke","closePath","rect","_walletConnection","requestSignIn","signOut","_accountId","signedIn","accountId","hsl","h","changeColor","newColor","index","indexOf","splice","rgb","r","g","b","content","style","marginBottom","className","width","disableAlpha","onChange","hueColorChange","triangle","onChangeComplete","role","aria-hidden","ref","height","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.61446ec4.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from 'react';\n// import BN from 'bn.js';\nimport * as nearAPI from 'near-api-js'\nimport { HuePicker, GithubPicker } from 'react-color'\n\nconst MasterPrivateKey = 'ed25519:N8BWV6ZKpFa161b2T8WoyGzNauLc9PSoLtzK53rjiPgAYUB1C45xh9jDzqcRsKdKTvjZM2Hn7t2yvbBVwbhkvHv';\n\n// const OneNear = new BN(\"1000000000000000000000000\");\nconst ContractName = 'unlimited-place.meta';\nconst BoardHeight = 50;\nconst BoardWidth = 50;\nconst NumLinesPerFetch = 10;\nconst ExpectedLineLength = 4 + 4 * BoardWidth;\nconst CellWidth = 16;\nconst CellHeight = 16;\nconst MaxNumColors = 31;\nconst BatchOfPixels = 200;\n// 500 ms\nconst BatchTimeout = 500;\nconst RefreshBoardTimeout = 1000;\nconst MaxWorkTime = 10 * 60 * 1000;\n\nconst intToColor = (c) => `#${c.toString(16).padStart(6, '0')}`;\nconst transparentColor = (c, a) => `rgba(${(c >> 16) / 1}, ${((c >> 8) & 0xff) / 1}, ${(c & 0xff) / 1}, ${a})`\nconst generateGamma = (hue) => {\n  const gammaColors = [];\n  for (let i = 0; i < MaxNumColors; ++i) {\n    gammaColors.push(`hsl(${hue}, 100%, ${100 * i / (MaxNumColors - 1)}%)`);\n  }\n  return gammaColors;\n};\nconst decodeLine = (line) => {\n  let buf = Buffer.from(line, 'base64');\n  if (buf.length !== ExpectedLineLength) {\n    throw new Error(\"Unexpected encoded line length\");\n  }\n  let pixels = []\n  for (let i = 4; i < buf.length; i += 4) {\n    let color = buf.readUInt32LE(i);\n    pixels.push({\n      color,\n    })\n  }\n  return pixels;\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const colors = [\"#000000\", \"#666666\", \"#aaaaaa\", \"#FFFFFF\", \"#F44E3B\", \"#D33115\", \"#9F0500\", \"#FE9200\", \"#E27300\", \"#C45100\", \"#FCDC00\", \"#FCC400\", \"#FB9E00\", \"#DBDF00\", \"#B0BC00\", \"#808900\", \"#A4DD00\", \"#68BC00\", \"#194D33\", \"#68CCCA\", \"#16A5A5\", \"#0C797D\", \"#73D8FF\", \"#009CE0\", \"#0062B1\", \"#AEA1FF\", \"#7B64FF\", \"#653294\", \"#FDA1FF\", \"#FA28FF\", \"#AB149E\"].map((c) => c.toLowerCase());\n    const currentColor = parseInt(colors[Math.floor(Math.random() * colors.length)].substring(1), 16);\n\n    this.state = {\n      failedToInitialize: false,\n      connected: false,\n      boardLoaded: false,\n      selectedCell: null,\n      currentColor,\n      pickerColor: intToColor(currentColor),\n      colors,\n      gammaColors: generateGamma(0),\n      pickingColor: false,\n    };\n\n    this.canvasRef = React.createRef();\n    this._context = false;\n    this._lines = false;\n    this._queue = [];\n    this._pendingPixels = [];\n    this._refreshBoardTimer = null;\n    this._sendQueueTimer = null;\n    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;\n\n    this._initNear().then(() => {\n      this.setState({\n        connected: true,\n      });\n    });\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    this._context = canvas.getContext('2d');\n\n    canvas.addEventListener('mousemove', (e) => {\n      const x = Math.trunc(e.offsetX / e.target.clientWidth * BoardWidth);\n      const y = Math.trunc(e.offsetY / e.target.clientHeight * BoardWidth);\n      let cell = null;\n      if (x >= 0 && x < BoardWidth && y >= 0 && y < BoardHeight) {\n        cell = { x, y };\n      }\n      if (JSON.stringify(cell) !== JSON.stringify(this.state.selectedCell)) {\n        this.setState({\n          selectedCell: cell,\n        }, async () => {\n          this.renderCanvas()\n          if (this.state.selectedCell !== null && (e.buttons & 1) > 0) {\n            if (this.state.pickingColor) {\n              this.pickColor(this.state.selectedCell);\n            } else {\n              this.saveColor();\n              await this.drawPixel(this.state.selectedCell);\n            }\n          }\n        })\n      }\n    });\n\n    canvas.addEventListener('click', async (e) => {\n      if (this.state.selectedCell !== null) {\n        if (this.state.pickingColor) {\n          this.pickColor(this.state.selectedCell);\n        } else {\n          this.saveColor();\n          await this.drawPixel(this.state.selectedCell);\n        }\n      }\n    });\n\n\n    document.addEventListener('keydown', (e) => {\n      e.altKey && this.setState({\n        pickingColor: true,\n      }, () => {\n        this.renderCanvas()\n      });\n    })\n    document.addEventListener('keyup', (e) => {\n      !e.altKey && this.setState({\n        pickingColor: false,\n      }, () => {\n        this.renderCanvas()\n      });\n    })\n  }\n\n  pickColor(cell) {\n    if (!this._lines || !this._lines[cell.y]) {\n      return;\n    }\n    const color = this._lines[cell.y][cell.x].color;\n\n    this.setState({\n      currentColor: color,\n      pickingColor: false,\n    }, () => {\n      this.renderCanvas()\n    });\n  }\n\n  async _sendQueue() {\n    const pixels = this._queue.slice(0, BatchOfPixels);\n    this._queue = this._queue.slice(BatchOfPixels);\n    this._pendingPixels = pixels;\n\n    try {\n      await this._contract.draw({\n        pixels\n      });\n      await this.refreshBoard(true);\n    } catch (error) {\n      console.log(\"Failed to send a transaction\", error);\n      this._queue = this._queue.concat(this._pendingPixels);\n    }\n    this._pendingPixels = [];\n  }\n\n  async _pingQueue(ready) {\n    if (this._sendQueueTimer) {\n      clearTimeout(this._sendQueueTimer);\n      this._sendQueueTimer = null;\n    }\n\n    if (this._pendingPixels.length === 0 && (this._queue.length >= BatchOfPixels || ready)) {\n      await this._sendQueue();\n    }\n    if (this._queue.length > 0) {\n      this._sendQueueTimer = setTimeout(async () => {\n        await this._pingQueue(true);\n      }, BatchTimeout);\n    }\n\n  }\n\n  async drawPixel(cell) {\n    if (!this.state.connected || this.state.failedToInitialize || !this._lines || !this._lines[cell.y]) {\n      return;\n    }\n\n    if (this._lines[cell.y][cell.x].color !== this.state.currentColor) {\n      this._lines[cell.y][cell.x].color = this.state.currentColor;\n    } else {\n      return;\n    }\n\n    this._queue.push({\n      x: cell.x,\n      y: cell.y,\n      color: this.state.currentColor,\n    });\n\n    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;\n    await this._pingQueue(false);\n  }\n\n  async initKey() {\n    let key = await this._keyStore.getKey(this._nearConfig.networkId, ContractName);\n    if (!key) {\n      const keyPair = nearAPI.KeyPair.fromString(MasterPrivateKey);\n      await this._keyStore.setKey(this._nearConfig.networkId, ContractName, keyPair);\n      const account = new nearAPI.Account(this._near.connection, ContractName);\n      this._contract = new nearAPI.Contract(account, ContractName, {\n        viewMethods: [],\n        changeMethods: ['add_access_key'],\n        sender: ContractName,\n      });\n      const newKeyPair = nearAPI.KeyPair.fromRandom('ED25519');\n      try {\n        await this._contract.add_access_key({\n          public_key: newKeyPair.getPublicKey().toString()\n        });\n        await this._keyStore.setKey(this._nearConfig.networkId, ContractName, newKeyPair);\n      } catch (err) {\n        await this._keyStore.removeKey(this._nearConfig.networkId, ContractName);\n        this._contract = null;\n        this.setState({\n          failedToInitialize: true,\n        });\n        return;\n      }\n    }\n    const account = new nearAPI.Account(this._near.connection, ContractName);\n    this._contract = new nearAPI.Contract(account, ContractName, {\n      viewMethods: ['get_lines', 'get_line_versions'],\n      changeMethods: ['draw'],\n      sender: ContractName,\n    });\n  }\n\n  async _initNear() {\n    const nearConfig = {\n      networkId: 'default',\n      nodeUrl: 'https://rpc.testnet.near.org',\n      contractName: ContractName,\n      walletUrl: 'https://wallet.testnet.near.org',\n    };\n\n    const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\n    const near = await nearAPI.connect(Object.assign({ deps: { keyStore } }, nearConfig));\n    this._keyStore = keyStore;\n    this._nearConfig = nearConfig;\n    this._near = near;\n\n    await this.initKey();\n\n    this._lineVersions = Array(BoardHeight).fill(-1);\n    this._lines = Array(BoardHeight).fill(false);\n    await this.refreshBoard(true);\n  }\n\n  async refreshBoard(forced) {\n    if (this._refreshBoardTimer) {\n      clearTimeout(this._refreshBoardTimer);\n      this._refreshBoardTimer = null;\n    }\n    const t = new Date().getTime();\n    if (t < this._stopRefreshTime) {\n      this._refreshBoardTimer = setTimeout(async () => {\n        await this.refreshBoard(false);\n      }, RefreshBoardTimeout);\n    }\n\n    if (!forced && document.hidden) {\n      return;\n    }\n\n    let lineVersions = await this._contract.get_line_versions();\n    let needLines = [];\n    for (let i = 0; i < BoardHeight; ++i) {\n      if (lineVersions[i] !== this._lineVersions[i]) {\n        needLines.push(i);\n      }\n    }\n    let requestLines = []\n    for (let i = 0; i < needLines.length; i += NumLinesPerFetch) {\n      requestLines.push(needLines.slice(i, i + NumLinesPerFetch));\n    }\n\n    let results = await Promise.all(requestLines.map(lines => this._contract.get_lines({lines})));\n    results = results.flat();\n    requestLines = requestLines.flat();\n    for (let i = 0; i < requestLines.length; ++i) {\n      let lineIndex = requestLines[i];\n      let line = decodeLine(results[i]);\n      this._lines[lineIndex] = line;\n    }\n\n    this._lineVersions = lineVersions;\n    this.renderCanvas();\n  }\n\n  renderCanvas() {\n    if (!this._context || !this._lines) {\n      return;\n    }\n\n    const ctx = this._context;\n\n    for (let i = 0; i < BoardHeight; ++i) {\n      const line = this._lines[i];\n      if (!line) {\n        continue;\n      }\n      for (let j = 0; j < BoardWidth; ++j) {\n        const p = line[j];\n        ctx.fillStyle = intToColor(p.color);\n        ctx.fillRect(j * CellWidth, i * CellHeight, CellWidth, CellHeight);\n      }\n    }\n\n    this._pendingPixels.concat(this._queue).forEach((p) => {\n      ctx.fillStyle = intToColor(p.color);\n      ctx.fillRect(p.x * CellWidth, p.y * CellHeight, CellWidth, CellHeight);\n    })\n\n    if (this.state.selectedCell) {\n      const c = this.state.selectedCell;\n      if (this.state.pickingColor) {\n        const color = this._lines[c.y] ? this._lines[c.y][c.x].color : 0;\n        ctx.beginPath();\n        ctx.strokeStyle = ctx.fillStyle = transparentColor(color, 0.5);\n        ctx.lineWidth = CellWidth * 4;\n        ctx.arc((c.x + 0.5) * CellWidth, (c.y + 0.5) * CellHeight, CellWidth * 4, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n\n        ctx.beginPath();\n        ctx.strokeStyle = ctx.fillStyle = transparentColor(color, 1);\n        ctx.lineWidth = CellWidth * 2;\n        ctx.arc((c.x + 0.5) * CellWidth, (c.y + 0.5) * CellHeight, CellWidth * 4, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n      } else {\n        ctx.fillStyle = transparentColor(this.state.currentColor, 0.2);\n        ctx.fillRect(c.x * CellWidth, 0, CellWidth, c.y * CellHeight);\n        ctx.fillRect(c.x * CellWidth, (c.y+ 1) * CellHeight, CellWidth, (BoardHeight - c.y - 1) * CellHeight);\n        ctx.fillRect(0, c.y * CellHeight, c.x * CellWidth, CellHeight);\n        ctx.fillRect( (c.x + 1) * CellWidth, c.y * CellHeight, (BoardWidth - c.x - 1) * CellWidth, CellHeight);\n\n        ctx.beginPath();\n        ctx.lineWidth = 3;\n        ctx.fillStyle = intToColor(this.state.currentColor);\n        ctx.strokeStyle = intToColor(this.state.currentColor);\n        ctx.rect(c.x * CellWidth, c.y * CellHeight, CellWidth, CellHeight);\n        ctx.stroke();\n        ctx.closePath();\n      }\n    }\n\n    if (!this.state.boardLoaded) {\n      this.setState({\n        boardLoaded: true\n      })\n    }\n  }\n\n  async requestSignIn() {\n    const appTitle = 'NEAR Place';\n    await this._walletConnection.requestSignIn(\n        ContractName,\n        appTitle\n    )\n  }\n\n  async logOut() {\n    this._walletConnection.signOut();\n    this._accountId = null;\n    this.setState({\n      signedIn: !!this._accountId,\n      accountId: this._accountId,\n    })\n  }\n\n  hueColorChange(c) {\n    this.setState({\n      gammaColors: generateGamma(c.hsl.h)\n    })\n    this.changeColor(c)\n  }\n\n  saveColor() {\n    const newColor = intToColor(this.state.currentColor);\n    const index = this.state.colors.indexOf(newColor);\n    if (index >= 0) {\n      this.state.colors.splice(index, 1);\n    }\n    this.setState({\n      colors: [newColor].concat(this.state.colors).slice(0, MaxNumColors)\n    });\n  }\n\n  changeColor(c) {\n    const currentColor = c.rgb.r * 0x010000 + c.rgb.g * 0x000100 + c.rgb.b;\n    this.setState({\n      pickerColor: c,\n      currentColor,\n    }, () => {\n      this.renderCanvas();\n    })\n  }\n\n  render() {\n    const content = !this.state.connected ? (\n        <div>Connecting... <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span></div>\n    ) : (!this.state.failedToInitialize ? (\n        <div>\n          <div className=\"color-picker\">\n            <HuePicker color={ this.state.pickerColor } width=\"100%\" disableAlpha={true} onChange={(c) => this.hueColorChange(c)}/>\n            <GithubPicker className=\"circle-picker\" colors={this.state.gammaColors} color={ this.state.pickerColor } triangle='hide' width=\"100%\" onChangeComplete={(c) => this.changeColor(c)}/>\n            <GithubPicker className=\"circle-picker\" colors={this.state.colors} color={ this.state.pickerColor } triangle='hide' width=\"100%\" onChangeComplete={(c) => this.hueColorChange(c)}/>\n          </div>\n        </div>\n    ) : (\n        <div style={{marginBottom: \"10px\"}}>\n          <h1>FAILED TO INITIALIZE THE KEY. TRY TO REFRESH</h1>\n        </div>\n    ));\n    return (\n      <div className=\"px-5\">\n        <h1>Unlimited NEAR Place</h1>\n        {content}\n        <div>\n          <canvas ref={this.canvasRef}\n                  width={800}\n                  height={800}\n                  className={this.state.boardLoaded ? \"pixel-board\" : \"pixel-board c-animated-background\"}>\n\n          </canvas>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}